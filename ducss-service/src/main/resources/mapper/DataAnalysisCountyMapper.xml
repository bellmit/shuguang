<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sofn.ducss.mapper.CountyDataAnalysisMapper">
    <select id="getProStillDetailListByAreaId" resultType="com.sofn.ducss.model.ProStillDetail">
        SELECT
        b.id,
        b.pro_still_id,
        b.straw_type,
        b.straw_name,
        b.grain_yield,
        b.grass_valley_ratio,
        b.collection_ratio,
        b.return_ratio,
        a.area_id,
        b.export_yield,
        b.seed_area,
        b.return_area,
        b.collection_ratio+b.grain_yield+b.grass_valley_ratio+b.return_area+b.return_ratio+b.seed_area+b.export_yield AS
        assigned
        from pro_still a
        left join pro_still_detail b on a.id=b.pro_still_id
        left join collect_flow f  on f.area_id = a.area_id and f.year = a.year
        <where>
			<if test="year!=null and year!=''">
				and a.year=#{year}
			</if>
			<if test="areaId!=null and areaId!=''">
				and a.area_id = #{areaId}
			</if>
			<if test="statues != null and statues.size > 0">
				and f.status in
				<foreach collection="statues" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>

    </select>

    <select id="selectDetailByAreaId"
            resultType="com.sofn.ducss.model.DisperseUtilizeDetail">
		 select *,(t1.disperse_base+t1.disperse_fertilising+t1.disperse_forage+t1.disperse_fuel+t1.disperse_material) as disperse_sum_all from (
			SELECT
				t.straw_type,
				ROUND(sum(t.yieldAllNum),10)as yield_all_num,
				ROUND(sum((t.yieldAllNum * t.fertilising * 0.01) + (case application when '0' then t.reuse when '肥料化' then t.reuse else 0 end)),10) AS disperse_fertilising,
			    ROUND(sum((t.yieldAllNum * t.forage * 0.01) + (case application when '1' then t.reuse when '饲料化' then t.reuse else 0 end)),10) AS disperse_forage,
				ROUND(sum((t.yieldAllNum * t.fuel * 0.01) + (case application when '2' then t.reuse when '燃料化' then t.reuse else 0 end)),10) AS disperse_fuel,
				ROUND(sum((t.yieldAllNum * t.base * 0.01) + (case application when '3' then t.reuse when '基料化' then t.reuse else 0 end)),10) AS disperse_base,
				ROUND(sum((t.yieldAllNum * t.material * 0.01) + (case application when '4' then t.reuse when '原料化' then t.reuse else 0 end)),10) AS disperse_material
			FROM
				(
					SELECT
						b.straw_type,
						(
							b.sown_area * b.yield_per_mu * d.grass_valley_ratio * d.collection_ratio / 1000
						) AS yieldAllNum,
						b.fertilising,
						b.forage,
						b.fuel,
						b.base,
						b.material,
						b.sown_area,
						b.yield_per_mu,
						b.reuse,
						b.application
					FROM
						disperse_utilize a
					INNER JOIN disperse_utilize_detail b ON a.id = b.utilize_id
					LEFT JOIN pro_still c ON a.area_id = c.area_id
					AND a.year = c.year
					LEFT JOIN pro_still_detail d ON c.id = d.pro_still_id
					AND b.straw_type = d.straw_type
					LEFT JOIN collect_flow f on f.area_id = a.area_id AND f."year" = a."year"
					where a.id=b.utilize_id and a.year=#{year} and a.area_id = #{areaId}
				) t GROUP BY t.straw_type
			) t1
	</select>

    <select id="selectDetailSumByAreaId"
            resultType="com.sofn.ducss.model.StrawUtilizeDetail">
		SELECT
		b.straw_type,
		COALESCE(sum(b.fertilising),0) fertilising,
		COALESCE(sum(b.forage),0) forage,
		COALESCE(sum(b.fuel),0) fuel,
		COALESCE(sum(b.base),0) base,
		COALESCE(sum(b.material),0) material,
		COALESCE(sum(b.other),0)  other
		FROM  straw_utilize A LEFT JOIN
		straw_utilize_detail b on a."id" = b.utilize_id
		LEFT JOIN collect_flow f on f.area_id = a.area_id AND f."year" = a."year"
		where  a.year=#{year}
				and a.area_id = #{areaId}
		group by 	b.straw_type
	</select>
    <select id="getDataAnalysisCity" resultType="com.sofn.ducss.model.DataAnalysisCity">
		SELECT
		straw_type,
		sum(grain_yield) as grain_yield,
		sum(seed_area) as seed_area,
		sum(return_area) as return_area,
		sum(export_yield) as export_yield,
		sum(theory_resource) as theory_resource,
		sum(collect_resource) as collect_resource,
		sum(market_ent) as market_ent,
		sum(fertilizes) as fertilizes,
		sum(feeds) as feeds,
		sum(fuelleds) as fuelleds,
		sum(base_mats) as base_mats,
		sum(materializations) as materializations,
		sum(reuse) as reuse,
		sum(fertilisingd) as fertilisingd,
		sum(foraged) as foraged,
		sum(fueld) as fueld,
		sum(based) as based,
		sum(materiald) as materiald,
		sum(return_resource) as return_resource,
		sum(other) as other,
		sum(fertilize) as fertilize,
		sum(feed) as feed,
		sum(fuelled) as fuelled,
		sum(base_mat) as base_mat,
		sum(materialization) as materialization,
		sum(straw_utilization) as straw_utilization,
		case sum(collect_resource) when 0 then 0
			else
			ROUND(  ( sum(  straw_utilization ) * 100 / sum( collect_resource ) ), 10 ) end AS totol_rate,
		case sum(collect_resource) when 0 then 0
			else
			ROUND(((sum(market_ent+reuse+return_resource))/sum(collect_resource)),10) end as compr_util_index,
			case sum(collect_resource) when 0 then 0
			else
			ROUND((sum(market_ent)/sum(collect_resource)),10) end as indu_util_index,
		sum(yield_all_num) as yield_all_num,

		sum(case when straw_utilization > 0 and collect_resource > 0 then collect_resource else 0 end) as "collectResourceV2",
		sum(case when straw_utilization > 0 and collect_resource > 0 then straw_utilization else 0 end) as "strawUtilizationV2"
		FROM
		"data_analysis_area"
		<where>
			<if test="year!=null and year!=''">
				 year=#{year}
			</if>
			<if test="areaList != null and areaList.size() > 0">
				and area_id in
				<foreach collection="areaList" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
		GROUP BY
		straw_type
	</select>
    <select id="getDataAnalysisProvice" resultType="com.sofn.ducss.model.DataAnalysisProvice">
		SELECT
		straw_type,
		sum(grain_yield) as grain_yield,
		sum(seed_area) as seed_area,
		sum(return_area) as return_area,
		sum(export_yield) as export_yield,
		sum(theory_resource) as theory_resource,
		sum(collect_resource) as collect_resource,
		sum(market_ent) as market_ent,
		sum(fertilizes) as fertilizes,
		sum(feeds) as feeds,
		sum(fuelleds) as fuelleds,
		sum(base_mats) as base_mats,
		sum(materializations) as materializations,
		sum(reuse) as reuse,
		sum(fertilisingd) as fertilisingd,
		sum(foraged) as foraged,
		sum(fueld) as fueld,
		sum(based) as based,
		sum(materiald) as materiald,
		sum(return_resource) as return_resource,
		sum(other) as other,
		sum(fertilize) as fertilize,
		sum(feed) as feed,
		sum(fuelled) as fuelled,
		sum(base_mat) as base_mat,
		sum(materialization) as materialization,
		sum(straw_utilization) as straw_utilization,
		case sum(collect_resource) when 0 then 0
		else
		ROUND(  ( sum( straw_utilization ) * 100 / sum( collect_resource ) ), 10 ) end AS totol_rate,
		case sum(collect_resource) when 0 then 0
		else
		ROUND(((sum(market_ent+reuse+return_resource))/sum(collect_resource)),10) end as compr_util_index,
		case sum(collect_resource) when 0 then 0
		else
		ROUND((sum(market_ent)/sum(collect_resource)),10) end as indu_util_index,
		sum(yield_all_num) as yield_all_num,

		sum(case when straw_utilization_v2 > 0 and collect_resource_v2 > 0 then collect_resource_v2 else 0 end) as "collectResourceV2",
		sum(case when straw_utilization_v2 > 0 and collect_resource_v2 > 0 then straw_utilization_v2 else 0 end) as "strawUtilizationV2"
		FROM
		"data_analysis_city"
		<where>
			<if test="year!=null and year!=''">
				year=#{year}
			</if>
			<if test="areaList != null and areaList.size() > 0">
				and city_id in
				<foreach collection="areaList" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
		GROUP BY
		straw_type
	</select>

    <select id="listByYearAndAreaIdsAndTotolRateTooMuch" resultType="com.sofn.ducss.model.DataAnalysisArea">
		select
		 	*
		from
			data_analysis_area
		<where>
			totol_rate > 100.10
			<if test="year !=null and year !=''">
				and year = #{year}
			</if>
			<if test="areaIds != null and areaIds.size() > 0">
				and area_id in
				<foreach collection="areaIds" item="areaId" open="(" separator="," close=")">
					#{areaId}
				</foreach>
			</if>
		</where>
	</select>
</mapper>